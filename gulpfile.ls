{union, join} = require \prelude-ls
require! 'gulp-livescript': lsc
require! <[ gulp glob path]>
require! 'vinyl-source-stream': source
require! 'vinyl-buffer': buffer
#require! 'gulp-plumber': plumber
require! 'gulp-watch': watch
require! 'gulp-jade': jade
require! 'node-notifier': notifier
require! 'gulp-concat': cat
require! 'browserify': browserify
require! 'gulp-uglify': uglify
require! './src/lib/aea': {sleep}
require! 'fs'
require! 'gulp-flatten': flatten

# TODO: combine = require('stream-combiner')

# Build Settings
notification-enabled = yes

# Project Folder Structure
vendor-folder = './vendor'
server-src = "./src/server"
build-folder = "./build"

client-public = "#{build-folder}/public"
client-src = './src/client'
client-tmp = "#{build-folder}/__client-tmp"
client-pages = "#{client-public}/pages"

lib-src = "./src/lib"
lib-tmp = "#{build-folder}/__lib-tmp"

components-src = "#{client-src}/components"
components-tmp = "#{client-tmp}/components"

on-error = (source, err) ->
    msg = "GULP ERROR: #{source} :: #{err?.to-string!}"
    notifier.notify {title: "GULP.#{source}", message: msg} if notification-enabled
    console.log msg


list-rel-files = (base, main, file-list) ->
        main = "#{base}/components.jade"
        ["./#{f}" - "#{base}/" for f in file-list when f isnt main]

is-module-index = (base, file) ->
    if base is path.dirname file
        console.log "this is a simple file: ", file
        return true

    if file is "#{path.dirname file}/#{path.basename file}"
        console.log "this is custom module: ", file
        return true

    [filename, ext] = path.basename file .split '.'
    if file is "#{path.dirname file}/index.#{ext}"
        console.log "this is a standart module", file
        return true

    #console.log "not a module index: #{file} (filename: #{filename}, ext: #{ext})"
    return false

# Organize Tasks
gulp.task \default, ->
    console.log "task lsc is running.."
    do function run-all
        gulp.start <[ js info-browserify html vendor vendor-css assets jade ]>

    # watch for component changes
    watch ["#{client-src}/components/**/*.*", "!#{client-src}/components/*.jade", "!#{client-src}/components/*.ls"] , (event) ->
        gulp.start <[ jade info-browserify ]>

    # watch for templates changes
    watch ["#{client-src}/templates/**/*.jade"], ->
        gulp.start \jade

    watch "#{client-src}/pages/*.*", (event) ->
        run-all!
    watch "#{lib-src}/**/*.*", (event) ->
        run-all!
    watch "#{vendor-folder}/**", (event) ->
        gulp.start <[ vendor vendor-css ]>

    watch "./node_modules/**", (event) ->
        run-all!

# Copy js and html files as is
gulp.task \js, ->
    gulp.src "#{client-src}/**/*.js", {base: client-src}
        .pipe gulp.dest client-tmp

gulp.task \html, ->
    gulp.src "#{client-src}/**/*.html", {base: client-src}
        .pipe gulp.dest client-tmp


# Compile client LiveScript files into temp folder
gulp.task \lsc-components <[ generate-components-module ]> ->
    console.log "RUNNING LSC_COMPONENTS"
    gulp.src "#{client-src}/components/**/*.ls", {base: client-src}
        .pipe lsc!
        .on \error, (err) ->
            on-error \lsc-lib, err
            @emit \end
        .pipe gulp.dest client-tmp


gulp.task \lsc-pages <[ lsc-components ]> ->
    console.log "RUNNING LSC_PAGES"
    base = "#{client-src}/pages"
    glob "#{base}/**/*.ls", (err, files) ->
        files = [.. for files when is-module-index base, ..]
        for f in files
            console.log "lsc-pages : ", f
        gulp.src files
            .pipe lsc!
            .on \error, (err) ->
                on-error \lsc-lib, err
                @emit \end
            .pipe flatten!
            .pipe gulp.dest "#{client-tmp}/pages"
    console.log "ENDED LSC_PAGES"


gulp.task \generate-components-module ->
    console.log "RUNNING GENERATE_COMPONENTS_MODULE"
    glob "#{components-src}/*", (err, filepath) ->
        base = components-src
        main = "#{base}/components.ls"
        components = ["#{f}" - "#{base}/" for f in filepath when f isnt main]

        # TODO: get only directories
        components = [.. for components when ..split '.' .length < 2]

        # delete the main file
        fs.write-file-sync main, '# Do not edit this file manually! \n'
        fs.append-file-sync main, join "" ["require! './#{..}'\n" for components]
        fs.append-file-sync main, "module.exports = { #{join ', ', components} }\n"

    console.log "ENDED GENERATE_COMPONENTS_MODULE"


# Compile library modules into library temp folder
gulp.task \lsc-lib, ->
    console.log "RUNNING LSC_LIB"
    gulp.src "#{lib-src}/**/*.ls", {base: lib-src}
        .pipe lsc!
        .on \error, (err) ->
            on-error \lsc-lib, err
            @emit \end
        .pipe gulp.dest lib-tmp
    console.log "ENDED LSC_LIB"

# Browserify pages/* into public folder
gulp.task \info-browserify <[ browserify ]> ->
    console.log "Browserifying finished!"

gulp.task \lsc <[ lsc-lib lsc-pages ]>, ->
    console.log "RUNNING LSC (which means ended)"
    console.log "lsc ended..."

gulp.task \browserify <[ lsc js]> ->
    console.log "running browserify!!!!"
    glob "#{client-tmp}/pages/*.js", (err, filepath) ->
        console.log "BROWSERIFY: ", err, "...", filepath
        for f in filepath
            filename = f.split '/' .slice -1
            base-folder = "#{f}" - "#{client-tmp}/" - "/#{filename}"
            console.log "browserify: filename: #{filename}, base folder: #{base-folder}"
            browserify f, {paths: [components-tmp, lib-tmp]}
                .bundle!
                .on \error, (err) ->
                    on-error \browserify, err
                    @emit \end
                .pipe source "#{filename}"
                .pipe buffer!
                #.pipe uglify!
                .pipe gulp.dest "#{client-public}/#{base-folder}"


# Concatenate vendor javascript files into public/js/vendor.js
gulp.task \vendor, ->
    glob "./vendor/**/*.js", (err, files) ->
        #for f in files
        #    console.log "VENDOR: #{f}"
        gulp.src files
            .pipe cat "vendor.js"
            .pipe gulp.dest "#{client-public}/js"

# Concatenate vendor css files into public/css/vendor.css
gulp.task \vendor-css, ->
    glob "#{vendor-folder}/**/*.css", (err, files) ->
        gulp.src files
            .pipe cat "vendor.css"
            .pipe gulp.dest "#{client-public}/css"

# Copy assets into the public directory as is
gulp.task \assets, ->
    gulp.src "#{client-src}/assets/**/*", {base: "#{client-src}/assets"}
        .pipe gulp.dest client-public

# Compile Jade files in client-src to the client-tmp folder
gulp.task \jade <[ jade-components ]> ->
    console.log "RUNNING JADE"
    base = "#{client-src}/pages"
    glob "#{base}/**/*.jade", (err, files) ->
        console.log "JADE.GLOB HAS RUN!!!"
        files = [.. for files when is-module-index base, ..]
        for f in files
            console.log "jade : ", f
        gulp.src files
            .pipe jade {pretty: yes}
            .on \error, (err) ->
                on-error \jade, err
                @emit \end
            .pipe flatten!
            .pipe gulp.dest client-pages
    console.log "ENDED JADE"


gulp.task \jade-components ->
    # create a file which includes all jade file includes in it
    console.log "STARTED JADE_COMPONENTS"

    glob "#{components-src}/**/*.jade", {base: components-src}, (err, filepath) ->
        base = components-src
        main = "#{base}/components.jade"
        components = ["./#{f}" - "#{base}/" for f in filepath when f isnt main]

        # delete the main file
        fs.write-file-sync main, '// Do not edit this file manually! \n'

        for comp in components
            fs.append-file-sync main, "include #{comp}\n"

    console.log "ENDED JADE_COMPONENTS"
