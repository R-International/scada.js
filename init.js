// Generated by LiveScript 1.3.1
var ref$, sleep, waitFor, timeoutWaitFor, go, merge, unpack, pack, repl, config, Wifi, connectToWifi, loadCode, onInit, slice$ = [].slice;
ref$ = require('aea'), sleep = ref$.sleep, waitFor = ref$.waitFor, timeoutWaitFor = ref$.timeoutWaitFor, go = ref$.go, merge = ref$.merge, unpack = ref$.unpack, pack = ref$.pack, repl = ref$.repl, config = ref$.config;
Wifi = require('Wifi');
connectToWifi = function(callback){
  return function lo(op){
    var wifiSetting, essid, passwd, health, e;
    try {
      wifiSetting = config.read(setting.wifi);
      essid = wifiSetting.essid;
      if (essid === void 8) {
        throw null;
      }
      passwd = wifiSetting.passwd;
      health = wifiSetting.health;
    } catch (e$) {
      e = e$;
      essid = 'aea';
      passwd = '084DA789BF';
      health = -1;
      console.log("Using default ESSID: ", essid);
    }
    return function lo(op){
      return Wifi.scan(function(apn){
        var i$, len$, i;
        for (i$ = 0, len$ = apn.length; i$ < len$; ++i$) {
          i = apn[i$];
          console.log("Found ESSID: ", i.ssid);
          if (i.ssid === essid) {
            return op();
          }
        }
        console.log("ESSID '{" + essid + "}' not found, searching again...");
        return sleep(2000, function(){
          return lo(op);
        });
      });
    }(function(){
      return function lo(op){
        console.log("trying to connect to wifi...");
        return Wifi.connect(essid, {
          password: passwd
        }, function(err){
          var e;
          console.log("connected? err=", err, "info", Wifi.getIP());
          if (err === null) {
            try {
              return op();
            } catch (e$) {
              e = e$;
              console.log("WTF:", e);
            }
          }
          sleep(5000, function(){
            return lo(op);
          });
        });
      }(function(){
        if (typeof callback === 'function') {
          return callback();
        }
      });
    });
  }(function(){});
};
function LongPolling(settings){
  var __;
  __ = this;
  this.settings = settings;
  this.http = require('http');
  this.content = {
    node: settings.id
  };
  this.events = {
    error: [],
    data: [],
    receive: [],
    connect: [],
    disconnect: [],
    code: []
  };
}
LongPolling.prototype.mkOpts = function(payload, settings){
  var options;
  options = {
    host: this.settings.host,
    port: this.settings.port,
    path: this.settings.path,
    method: this.settings.method,
    headers: {
      "Content-Type": "application/json",
      "Content-Length": pack(payload).length
    }
  };
  if (settings) {
    options = merge(options, settings);
  }
  return options;
};
LongPolling.prototype.trigger = function(name){
  var event, i$, x$, ref$, len$, results$ = [];
  event = slice$.call(arguments, 1);
  for (i$ = 0, len$ = (ref$ = this.events[name]).length; i$ < len$; ++i$) {
    x$ = ref$[i$];
    if (typeof x$ === 'function') {
      results$.push(x$.apply(this, event));
    }
  }
  return results$;
};
LongPolling.prototype.send = function(msg, callback){
  return this.sendRaw({
    data: msg
  }, callback);
};
LongPolling.prototype.sendAck = function(callback){
  return this.sendRaw({
    ack: "Mahmut"
  }, callback);
};
LongPolling.prototype.sendRaw = function(msg, callback){
  var __, content, connInf, testReqId, req;
  __ = this;
  content = merge(msg, this.content);
  connInf = this.mkOpts(content);
  console.log('--------------------');
  testReqId = Math.floor(Math.random() * 1000 + 1);
  console.log("New Request: ", testReqId);
  req = this.http.request(connInf, function(res){
    res.on('data', function(data){
      var gotData;
      gotData = unpack(data);
      console.log("Resp id: " + testReqId + " HTTP> ", gotData);
      if (gotData.ack) {
        try {
          callback();
        } catch (e$) {}
      }
      if (gotData.data) {
        try {
          return callback();
        } catch (e$) {}
      }
    });
    res.on('error', function(){
      return console.log("Error: " + testReqId + " ... WTF");
    });
    return res.on('close', function(){
      return console.log("Request: " + testReqId + " closed by server..");
    });
  });
  req.on('error', function(err){
    __.trigger('error', err, callback);
    return callback(err.message);
  });
  req.write(pack(content));
  req.end();
  return console.log(process.memory());
};
loadCode = void 8;
LongPolling.prototype.sendGet = function(msg){
  var __, content, options, connInf, req;
  __ = this;
  content = merge(msg, this.content);
  options = {
    host: '192.168.2.107',
    id: 'abc123',
    port: 5656,
    path: '/receive'
  };
  connInf = options;
  return req = this.http.get(connInf, function(res){
    return res.on('data', function(data){
      console.log("Get function got data: ", data, typeof data, data.length);
      return loadCode = data;
    });
  });
};
LongPolling.prototype.connect = function(callback){
  var __;
  __ = this;
  return this.sendAck(function(err){
    if (!err) {
      console.log("Connect function run correctly..");
      callback();
      return function lo(op){
        console.log("Receiver is starting asyncronously..");
        return __.sendGet(function(arr){
          console.log("ARR: ", arr);
          if (!arr) {
            console.log("Burasi...");
            return sleep(10000, function(){
              return lo(op);
            });
          }
        });
      }(function(){});
    } else {
      console.log("Trying to connect again (2s)...");
      return sleep(1000, function(){
        return __.connect(callback);
      });
    }
  });
};
LongPolling.prototype.on = function(event, callback){
  var ref$;
  return (ref$ = this.events)[event] = ref$[event].concat(callback);
};
onInit = function(){
  return connectToWifi(function(){
    var comm, x$;
    comm = new LongPolling({
      host: '192.168.2.107',
      id: 'abc123',
      port: 5656,
      path: '/send',
      method: 'POST'
    });
    x$ = comm;
    x$.on('receive', function(data){
      return console.log("I received following data: ", data);
    });
    x$.on('error', function(err, callback){
      return console.log("COMM-ERR::: ", err.message);
    });
    x$.on('connect', function(info){
      return console.log("Connected to server!!! Server info: ", info);
    });
    x$.on('disconnect', function(){
      return console.log("Disconnected from server!");
    });
    x$.on('code', function(code){
      return console.log("Code is : ", code);
    });
    return comm.connect(function(){
      return sleep(20000, function(){
        (function lo(op){
          if (loadCode) {
            console.log("Evaling code,,");
            return eval(loadCode);
          } else {
            return lo(op);
          }
        })(function(){});
        console.log("following code is starting...");
        return sleep(1000, function(){
          return function lo(op){
            return comm.send({
              temperature: Math.random()
            }, function(err){
              if (err) {
                console.log("We couldn't send data!");
              }
              return timeoutWaitFor(10000, 'temperature-measured', function(){
                return lo(op);
              });
            });
          }(function(){});
        });
      });
    });
  });
};