// Generated by LiveScript 1.4.0
var ref$, sleep, waitFor, timeoutWaitFor, go, isWaiting, merge, unpack, pack, repl, config, getLogger, LongPolling;
ref$ = require('../lib/aea'), sleep = ref$.sleep, waitFor = ref$.waitFor, timeoutWaitFor = ref$.timeoutWaitFor, go = ref$.go, isWaiting = ref$.isWaiting, merge = ref$.merge, unpack = ref$.unpack, pack = ref$.pack, repl = ref$.repl, config = ref$.config, getLogger = ref$.getLogger;
LongPolling = require('../lib/aea-embedded').LongPolling;
function init(){
  var log, comm, x$;
  log = getLogger('MAIN');
  comm = new LongPolling({
    host: 'localhost',
    port: 5656,
    path: {
      db: '/todo',
      changes: '/todo/_changes',
      info: "/"
    },
    id: 'abc123'
  });
  x$ = comm;
  x$.on('error', function(err){
    return log("COMM-ERR:: ", err);
  });
  x$.on('connect', function(info){
    return log("Connected to server. Server info: ", pack(info));
  });
  x$.on('disconnect', function(){
    return log("Disconnected from server!!!");
  });
  x$.on('data', function(data){
    return log("Received DATA: ", pack(data));
  });
  return comm.send({
    mydata: 'hello'
  }, function(err){
    log("send hello: ", err);
    return comm.connect(function(){
      log("it seems connection is ok, continuing...");
      return comm.get('/todo/mahmut-1', function(err, data){
        var i;
        if (err) {
          log("err: ", err);
        }
        log("data: ", pack(data));
        i = 0;
        return function lo(op){
          return comm.send({
            _id: "embedded-" + (i++),
            temperature: Math.random()
          }, function(err){
            if (err) {
              log("We couldn't send to data because: ", err);
            }
            return timeoutWaitFor(10000, 'temperature-measured', function(){
              return lo(op);
            });
          });
        }(function(){});
      });
    });
  });
} init();