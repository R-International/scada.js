// Generated by LiveScript 1.4.0
var ref$, sleep, pack, Config, WifiConnect, LongPolling, log, wifi, aktos, comm, onInit;
ref$ = require('aea'), sleep = ref$.sleep, pack = ref$.pack;
Config = require('config').Config;
WifiConnect = require('connect-to-wifi').WifiConnect;
LongPolling = require('long-polling').LongPolling;
log = console.log;
wifi = new WifiConnect(aktos = {
  essid: 'aea',
  passwd: '084DA789BF'
});
comm = new LongPolling({
  host: '192.168.2.103',
  port: 5656,
  path: {
    db: '/todo',
    changes: '/todo/_changes',
    info: "/"
  },
  id: getSerial()
});
onInit = function(){
  console.log("Started on-init!");
  return wifi.connect(function(err){
    var x$;
    if (err) {
      console.log("err wifi connect: ", err);
      return;
    }
    console.log("Connected to wifi, continuing...");
    x$ = comm;
    x$.on('error', function(err){
      return log("COMM-ERR:: ", err);
    });
    x$.on('connect', function(info){
      return log("Connected to server. Server info: ", pack(info));
    });
    x$.on('disconnect', function(){
      return log("Disconnected from server!!!");
    });
    x$.on('data', function(data){
      return log("Received DATA: ", pack(data));
    });
    log("After2 LONG_POLLING: ", process.memory());
    return comm.connect(function(err){
      log("it seems connection is ok, continuing...");
      log("sending hello...");
      return comm.send({
        mydata: 'hello'
      }, function(){
        log("send hello: ", err);
        return comm.get('/todo/mahmut-1', function(err, data){
          var i;
          if (err) {
            log("err: ", err);
          }
          log("data: ", pack(data));
          i = 0;
          return function lo(op){
            return comm.send({
              _id: "embedded-" + (i++),
              temperature: Math.random() * 100
            }, function(err){
              if (err) {
                log("We couldn't send to data because: ", err);
              }
              return sleep(10000, function(){
                return lo(op);
              });
            });
          }(function(){});
        });
      });
    });
  });
};