(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var hey, presets, simpleStr, wrap, slice$ = [].slice, toString$ = {}.toString;
hey = require('./my-module').hey;
presets = require('presets').presets;
simpleStr = function(arr){
  return arr.join('');
};
wrap = function(content){
  return "data:image/svg+xml;base64," + btoa(content);
};
(function(){
  var make, handler, ldBar;
  make = {
    head: function(viewBox){
      return "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"" + viewBox + "\">";
    },
    gradient: function(dir, dur){
      var colors, ret, len, gx, gy, x, y, i$, i, idx;
      dir == null && (dir = 45);
      dur == null && (dur = 1);
      colors = slice$.call(arguments, 2);
      ret = [this.head("0 0 100 100")];
      len = colors.length * 4 + 1;
      dir = dir * Math.PI / 180;
      gx = Math.pow(Math.cos(dir), 2);
      gy = Math.sqrt(gx - Math.pow(gx, 2));
      if (dir > Math.PI * 0.25) {
        gy = Math.pow(Math.sin(dir), 2);
        gx = Math.sqrt(gy - Math.pow(gy, 2));
      }
      x = gx * 100;
      y = gy * 100;
      ret.push("<defs><linearGradient id=\"gradient\" x1=\"0\" x2=\"" + gx + "\" y1=\"0\" y2=\"" + gy + "\">");
      for (i$ = 0; i$ < len; ++i$) {
        i = i$;
        idx = i * 100 / (len - 1);
        ret.push("<stop offset=\"" + idx + "%\" stop-color=\"" + colors[i % colors.length] + "\"/>");
      }
      ret.push("</linearGradient></defs>\n<rect x=\"0\" y=\"0\" width=\"400\" height=\"400\" fill=\"url(#gradient)\">\n<animateTransform attributeName=\"transform\" type=\"translate\" from=\"-" + x + ",-" + y + "\"\nto=\"0,0\" dur=\"" + dur + "s\" repeatCount=\"indefinite\"/></rect></svg>");
      return wrap(ret.join(""));
    },
    stripe: function(c1, c2, dur){
      var ret, i;
      c1 == null && (c1 = '#b4b4b4');
      c2 == null && (c2 = '#e6e6e6');
      dur == null && (dur = 1);
      ret = [this.head("0 0 100 100")];
      ret = ret.concat([
        "<rect fill=\"" + c2 + "\" width=\"100\" height=\"100\"/>", "<g><g>", (function(){
          var i$, results$ = [];
          for (i$ = 0; i$ < 13; ++i$) {
            i = i$;
            results$.push(("<polygon fill=\"" + c1 + "\" ") + ("points=\"" + (-90 + i * 20) + ",100 " + (-100 + i * 20) + ",") + ("100 " + (-60 + i * 20) + ",0 " + (-50 + i * 20) + ",0 \"/>"));
          }
          return results$;
        }()).join(""), "</g><animateTransform attributeName=\"transform\" type=\"translate\" ", "from=\"0,0\" to=\"20,0\" dur=\"" + dur + "s\" repeatCount=\"indefinite\"/></g></svg>"
      ].join(""));
      return wrap(ret);
    },
    bubble: function(c1, c2, count, dur, size, sw){
      var ret, i$, i, idx, x, r, d;
      c1 == null && (c1 = '#39d');
      c2 == null && (c2 = '#9cf');
      count == null && (count = 15);
      dur == null && (dur = 1);
      size == null && (size = 6);
      sw == null && (sw = 1);
      ret = [this.head("0 0 200 200"), "<rect x=\"0\" y=\"0\" width=\"200\" height=\"200\" fill=\"" + c1 + "\"/>"];
      for (i$ = 0; i$ < count; ++i$) {
        i = i$;
        idx = -(i / count) * dur;
        x = Math.random() * 184 + 8;
        r = (Math.random() * 0.7 + 0.3) * size;
        d = dur * (1 + Math.random() * 0.5);
        ret.push(["<circle cx=\"" + x + "\" cy=\"0\" r=\"" + r + "\" fill=\"none\" stroke=\"" + c2 + "\" stroke-width=\"" + sw + "\">", "<animate attributeName=\"cy\" values=\"190;-10\" times=\"0;1\" ", "dur=\"" + d + "s\" begin=\"" + idx + "s\" repeatCount=\"indefinite\"/>", "</circle>", "<circle cx=\"" + x + "\" cy=\"0\" r=\"" + r + "\" fill=\"none\" stroke=\"" + c2 + "\" stroke-width=\"" + sw + "\">", "<animate attributeName=\"cy\" values=\"390;190\" times=\"0;1\" ", "dur=\"" + d + "s\" begin=\"" + idx + "s\" repeatCount=\"indefinite\"/>", "</circle>"].join(""));
      }
      return wrap(ret.join("") + "</svg>");
    }
  };
  handler = {
    queue: {},
    running: false,
    main: function(timestamp){
      var keepon, removed, k, ref$, func, ret, this$ = this;
      keepon = false;
      removed = [];
      for (k in ref$ = this.queue) {
        func = ref$[k];
        ret = func(timestamp);
        if (!ret) {
          removed.push(func);
        }
        keepon = keepon || ret;
      }
      for (k in ref$ = this.queue) {
        func = ref$[k];
        if (removed.indexOf(func) >= 0) {
          delete this.queue[k];
        }
      }
      if (keepon) {
        return requestAnimationFrame(function(it){
          return this$.main(it);
        });
      } else {
        return this.running = false;
      }
    },
    add: function(key, f){
      var this$ = this;
      if (!this.queue[key]) {
        this.queue[key] = f;
      }
      if (!this.running) {
        this.running = true;
        return requestAnimationFrame(function(it){
          return this$.main(it);
        });
      }
    }
  };
  return window.ldBar = ldBar = function(selector, option){
    var xmlns, root, cls, idPrefix, id, domTree, newNode, x$, config, attr, that, isStroke, parseRes, dom, svg, text, group, length, path0, path1, patimg, img, ret, size, this$ = this;
    option == null && (option = {});
    xmlns = {
      xlink: "http://www.w3.org/1999/xlink"
    };
    root = toString$.call(selector).slice(8, -1) === 'String' ? document.querySelector(selector) : selector;
    cls = root.getAttribute('class') || '';
    if (!~cls.indexOf('ldBar')) {
      root.setAttribute('class', cls + " ldBar");
    }
    idPrefix = "ldBar-" + Math.random().toString(16).substring(2);
    id = {
      key: id,
      clip: idPrefix + "-clip",
      filter: idPrefix + "-filter",
      pattern: idPrefix + "-pattern",
      mask: idPrefix + "-mask",
      maskPath: idPrefix + "-mask-path"
    };
    domTree = function(n, o){
      var k, v;
      n = newNode(n);
      for (k in o) {
        v = o[k];
        if (k !== 'attr') {
          n.appendChild(domTree(k, v || {}));
        }
      }
      n.attrs(o.attr || {});
      return n;
    };
    newNode = function(n){
      return document.createElementNS("http://www.w3.org/2000/svg", n);
    };
    x$ = document.body.__proto__.__proto__.__proto__;
    x$.text = function(t){
      return this.appendChild(document.createTextNode(t));
    };
    x$.attrs = function(o){
      var k, v, ret, results$ = [];
      for (k in o) {
        v = o[k];
        ret = /([^:]+):([^:]+)/.exec(k);
        if (!ret || !xmlns[ret[1]]) {
          results$.push(this.setAttribute(k, v));
        } else {
          results$.push(this.setAttributeNS(xmlns[ret[1]], k, v));
        }
      }
      return results$;
    };
    x$.styles = function(o){
      var k, v, results$ = [];
      for (k in o) {
        v = o[k];
        results$.push(this.style[k] = v);
      }
      return results$;
    };
    x$.append = function(n){
      var r;
      return this.appendChild(r = document.createElementNS("http://www.w3.og/2000/svg", n));
    };
    x$.attr = function(n, v){
      if (v != null) {
        return this.setAttribute(n, v);
      } else {
        return this.getAttribute(n);
      }
    };
    config = {
      "type": 'stroke',
      "img": '',
      "path": 'M10 10L90 10',
      "fill-dir": 'btt',
      "fill": '#25b',
      "fill-background": '#ddd',
      "fill-background-extrude": 3,
      "pattern-size": null,
      "stroke-dir": 'normal',
      "stroke": '#25b',
      "stroke-width": '3',
      "stroke-trail": '#ddd',
      "stroke-trail-width": 0.5,
      "duration": 1,
      "easing": 'linear',
      "value": 0,
      "img-size": null
    };
    config["preset"] = root.attr("data-preset") || option["preset"];
    if (config.preset != null) {
      import$(config, presets[config.preset]);
    }
    for (attr in config) {
      if (that = that = root.attr("data-" + attr)) {
        config[attr] = that;
      }
    }
    import$(config, option);
    if (config.img) {
      config.path = null;
    }
    isStroke = config.type === 'stroke';
    parseRes = function(v){
      var parser, ret;
      parser = /data:ldbar\/res,([^()]+)\(([^)]+)\)/;
      ret = parser.exec(v);
      if (!ret) {
        return v;
      }
      return ret = make[ret[1]].apply(make, ret[2].split(','));
    };
    config.fill = parseRes(config.fill);
    config.stroke = parseRes(config.stroke);
    parseRes = function(v){
      var parser, ret;
      parser = /data:ldbar\/res,([^()]+)\(([^)]+)\)/;
      ret = parser.exec(v);
      if (!ret) {
        return v;
      }
      return ret = make[ret[1]].apply(make, ret[2].split(','));
    };
    config.fill = parseRes(config.fill);
    config.stroke = parseRes(config.stroke);
    dom = {
      attr: {
        "xmlns:xlink": 'http://www.w3.org/1999/xlink',
        preserveAspectRatio: 'xMidYMid',
        width: "100%",
        height: "100%"
      },
      defs: {
        filter: {
          attr: {
            id: id.filter,
            x: -1,
            y: -1,
            width: 3,
            height: 3
          },
          feMorphology: {
            attr: {
              operator: +config["fill-background-extrude"] >= 0 ? 'dilate' : 'erode',
              radius: Math.abs(+config["fill-background-extrude"])
            }
          },
          feColorMatrix: {
            attr: {
              values: '0 0 0 0 1    0 0 0 0 1    0 0 0 0 1    0 0 0 1 0',
              result: "cm"
            }
          }
        },
        mask: {
          attr: {
            id: id.mask
          },
          image: {
            attr: {
              "xlink:href": config.img,
              filter: "url(#" + id.filter + ")",
              x: 0,
              y: 0,
              width: 100,
              height: 100,
              preserveAspectRatio: "xMidYMid"
            }
          }
        },
        g: {
          mask: {
            attr: {
              id: id.maskPath
            },
            path: {
              attr: {
                d: config.path || "",
                fill: '#fff',
                stroke: '#fff',
                filter: "url(#" + id.filter + ")"
              }
            }
          }
        },
        clipPath: {
          attr: {
            id: id.clip
          },
          rect: {
            attr: {
              'class': 'mask',
              fill: '#000'
            }
          }
        },
        pattern: {
          attr: {
            id: id.pattern,
            patternUnits: 'userSpaceOnUse',
            x: 0,
            y: 0,
            width: 300,
            height: 300
          },
          image: {
            attr: {
              x: 0,
              y: 0,
              width: 300,
              height: 300
            }
          }
        }
      }
    };
    svg = domTree('svg', dom);
    text = document.createElement('div');
    text.setAttribute('class', 'ldBar-label');
    root.appendChild(svg);
    root.appendChild(text);
    group = [0, 0];
    length = 0;
    this.fit = function(){
      var box, d, rect;
      box = group[1].getBBox();
      d = Math.max.apply(null, ['stroke-width', 'stroke-trail-width', 'fill-background-extrude'].map(function(it){
        return config[it];
      })) * 1.5;
      svg.attrs({
        viewBox: [box.x - d, box.y - d, box.width + d * 2, box.height + d * 2].join(" ")
      });
      if (!root.style.width) {
        root.styles({
          width: (box.width + d * 2) + "px"
        });
      }
      if (!root.style.height) {
        root.styles({
          height: (box.height + d * 2) + "px"
        });
      }
      rect = group[0].querySelector('rect');
      if (rect) {
        return rect.attrs({
          x: box.x - d,
          y: box.y - d,
          width: box.width + d * 2,
          height: box.height + d * 2
        });
      }
    };
    if (config.path) {
      if (isStroke) {
        group[0] = domTree('g', {
          path: {
            attr: {
              d: config.path,
              fill: 'none',
              'class': 'baseline'
            }
          }
        });
      } else {
        group[0] = domTree('g', {
          rect: {
            attr: {
              x: 0,
              y: 0,
              width: 100,
              height: 100,
              mask: "url(#" + id.maskPath + ")",
              fill: config["fill-background"],
              'class': 'frame'
            }
          }
        });
      }
      svg.appendChild(group[0]);
      group[1] = domTree('g', {
        path: {
          attr: {
            d: config.path,
            'class': isStroke ? 'mainline' : 'solid',
            "clip-path": config.type === 'fill' ? "url(#" + id.clip + ")" : ''
          }
        }
      });
      svg.appendChild(group[1]);
      path0 = group[0].querySelector(isStroke ? 'path' : 'rect');
      path1 = group[1].querySelector('path');
      if (isStroke) {
        path1.attrs({
          fill: 'none'
        });
      }
      patimg = svg.querySelector('pattern image');
      img = new Image();
      img.addEventListener('load', function(){
        var box, that;
        box = (that = config["pattern-size"])
          ? {
            width: +that,
            height: +that
          }
          : img.width && img.height
            ? {
              width: img.width,
              height: img.height
            }
            : {
              width: 300,
              height: 300
            };
        svg.querySelector('pattern').attrs({
          width: box.width,
          height: box.height
        });
        return patimg.attrs({
          width: box.width,
          height: box.height
        });
      });
      if (/.+\..+|^data:/.exec(!isStroke
        ? config.fill
        : config.stroke)) {
        img.src = !isStroke
          ? config.fill
          : config.stroke;
        patimg.attrs({
          "xlink:href": img.src
        });
      }
      if (isStroke) {
        path0.attrs({
          stroke: config["stroke-trail"],
          "stroke-width": config["stroke-trail-width"]
        });
        path1.attrs({
          "stroke-width": config["stroke-width"],
          stroke: /.+\..+|^data:/.exec(config.stroke)
            ? "url(#" + id.pattern + ")"
            : config.stroke
        });
      }
      if (config.fill && !isStroke) {
        path1.attrs({
          fill: /.+\..+|^data:/.exec(config.fill)
            ? "url(#" + id.pattern + ")"
            : config.fill
        });
      }
      length = path1.getTotalLength();
      this.fit();
      this.inited = true;
    } else if (config.img) {
      if (config["img-size"]) {
        ret = config["img-size"].split(',');
        size = {
          width: +ret[0],
          height: +ret[1]
        };
      } else {
        size = {
          width: 100,
          height: 100
        };
      }
      group[0] = domTree('g', {
        rect: {
          attr: {
            x: 0,
            y: 0,
            width: 100,
            height: 100,
            mask: "url(#" + id.mask + ")",
            fill: config["fill-background"]
          }
        }
      });
      svg.querySelector('mask image').attrs({
        width: size.width,
        height: size.height
      });
      group[1] = domTree('g', {
        image: {
          attr: {
            width: size.width,
            height: size.height,
            x: 0,
            y: 0,
            preserveAspectRatio: "xMidYMid",
            "clip-path": config.type === 'fill' ? "url(#" + id.clip + ")" : '',
            "xlink:href": config.img,
            'class': 'solid'
          }
        }
      });
      img = new Image();
      img.addEventListener('load', function(){
        var ret, size;
        if (config["img-size"]) {
          ret = config["img-size"].split(',');
          size = {
            width: +ret[0],
            height: +ret[1]
          };
        } else if (img.width && img.height) {
          size = {
            width: img.width,
            height: img.height
          };
        } else {
          size = {
            width: 100,
            height: 100
          };
        }
        svg.querySelector('mask image').attrs({
          width: size.width,
          height: size.height
        });
        group[1].querySelector('image').attrs({
          width: size.width,
          height: size.height
        });
        this$.fit();
        this$.set(undefined, false);
        return this$.inited = true;
      });
      img.src = config.img;
      svg.appendChild(group[0]);
      svg.appendChild(group[1]);
    }
    svg.attrs({
      width: '100%',
      height: '100%'
    });
    this.transition = {
      value: {
        src: 0,
        des: 0
      },
      time: {},
      ease: function(t, b, c, d){
        t = t / (d * 0.5);
        if (t < 1) {
          return c * 0.5 * t * t + b;
        }
        t = t - 1;
        return -c * 0.5 * (t * (t - 2) - 1) + b;
      },
      handler: function(time){
        var ref$, dv, dt, dur, v, node, style, box, dir;
        if (this.time.src == null) {
          this.time.src = time;
        }
        ref$ = [this.value.des - this.value.src, (time - this.time.src) * 0.001, +config["duration"] || 1], dv = ref$[0], dt = ref$[1], dur = ref$[2];
        text.textContent = v = Math.round(this.ease(dt, this.value.src, dv, dur));
        if (isStroke) {
          node = path1;
          style = {
            "stroke-dasharray": config["stroke-dir"] === 'reverse'
              ? "0 " + length * (100 - v) * 0.01 + " " + length * v * 0.01 + " 0"
              : v * 0.01 * length + " " + ((100 - v) * 0.01 * length + 1)
          };
        } else {
          box = group[1].getBBox();
          dir = config["fill-dir"];
          style = dir === 'btt' || !dir
            ? {
              y: box.y + box.height * (100 - v) * 0.01,
              height: box.height * v * 0.01,
              x: box.x,
              width: box.width
            }
            : dir === 'ttb'
              ? {
                y: box.y,
                height: box.height * v * 0.01,
                x: box.x,
                width: box.width
              }
              : dir === 'ltr'
                ? {
                  y: box.y,
                  height: box.height,
                  x: box.x,
                  width: box.width * v * 0.01
                }
                : dir === 'rtl' ? {
                  y: box.y,
                  height: box.height,
                  x: box.x + box.width * (100 - v) * 0.01,
                  width: box.width * v * 0.01
                } : void 8;
          node = svg.querySelector('rect');
        }
        node.attrs(style);
        if (dt >= dur) {
          delete this.time.src;
          return false;
        }
        return true;
      },
      start: function(src, des, doTransition){
        var ref$, this$ = this;
        ref$ = this.value;
        ref$.src = src;
        ref$.des = des;
        !!(root.offsetWidth || root.offsetHeight || root.getClientRects().length);
        if (!doTransition || !(root.offsetWidth || root.offsetHeight || root.getClientRects().length)) {
          this.time.src = 0;
          this.handler(1000);
          return;
        }
        return handler.add(id.key, function(time){
          return this$.handler(time);
        });
      }
    };
    this.set = function(v, doTransition){
      var src, des;
      doTransition == null && (doTransition = true);
      src = this.value || 0;
      if (v != null) {
        this.value = v;
      } else {
        v = this.value;
      }
      des = this.value;
      return this.transition.start(src, des, doTransition);
    };
    this.set(+config.value || 0, false);
    return this;
  };
})();
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}



},{"./my-module":2,"presets":3}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var hey, out$ = typeof exports != 'undefined' && exports || this;
out$.hey = hey = function(){
  return console.log("This is loading bar!");
};



},{}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var presets, out$ = typeof exports != 'undefined' && exports || this;
console.log("REMOVEME: presets are separated");
out$.presets = presets = {
  rainbow: {
    "type": 'stroke',
    "path": 'M10 10L90 10',
    "stroke": 'data:ldbar/res,gradient(0,1,#a551df,#fd51ad,#ff7f82,#ffb874,#ffeb90)'
  },
  energy: {
    "type": 'fill',
    "path": 'M15 5L85 5A5 5 0 0 1 85 15L15 15A5 5 0 0 1 15 5',
    "stroke": '#f00',
    "fill": 'data:ldbar/res,gradient(45,2,#4e9,#8fb,#4e9)',
    "fill-dir": "ltr",
    "fill-background": '#444',
    "fill-background-extrude": 1
  },
  stripe: {
    "type": 'fill',
    "path": 'M15 5L85 5A5 5 0 0 1 85 15L15 15A5 5 0 0 1 15 5',
    "stroke": '#f00',
    "fill": 'data:ldbar/res,stripe(#25b,#58e,1)',
    "fill-dir": "ltr",
    "fill-background": '#ddd',
    "fill-background-extrude": 1
  },
  text: {
    "type": 'fill',
    "img": "data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"70\" height=\"20\" viewBox=\"0 0 70 20\"><text x=\"35\" y=\"10\" text-anchor=\"middle\" minant-baseline=\"central\" font-family=\"arial\">LOADING</text></svg>",
    "fill-background-extrude": 1.3,
    "pattern-size": 100,
    "fill-dir": "ltr",
    "img-size": "70,20"
  },
  line: {
    "type": 'stroke',
    "path": 'M10 10L90 10',
    "stroke": '#25b',
    "stroke-width": 3,
    "stroke-trail": '#ddd',
    "stroke-trail-width": 1
  },
  fan: {
    "type": 'stroke',
    "path": 'M10 90A40 40 0 0 1 90 90',
    "fill-dir": 'btt',
    "fill": '#25b',
    "fill-background": '#ddd',
    "fill-background-extrude": 3,
    "stroke-dir": 'normal',
    "stroke": '#25b',
    "stroke-width": '3',
    "stroke-trail": '#ddd',
    "stroke-trail-width": 0.5
  },
  circle: {
    "type": 'stroke',
    "path": 'M50 10A40 40 0 0 1 50 90A40 40 0 0 1 50 10',
    "fill-dir": 'btt',
    "fill": '#25b',
    "fill-background": '#ddd',
    "fill-background-extrude": 3,
    "stroke-dir": 'normal',
    "stroke": '#25b',
    "stroke-width": '3',
    "stroke-trail": '#ddd',
    "stroke-trail-width": 0.5
  },
  bubble: {
    "type": 'fill',
    "path": 'M50 10A40 40 0 0 1 50 90A40 40 0 0 1 50 10',
    "fill-dir": 'btt',
    "fill": 'data:ldbar/res,bubble(#39d,#cef)',
    "pattern-size": "150",
    "fill-background": '#ddd',
    "fill-background-extrude": 2,
    "stroke-dir": 'normal',
    "stroke": '#25b',
    "stroke-width": '3',
    "stroke-trail": '#ddd',
    "stroke-trail-width": 0.5
  }
};



},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvaG9tZS9jZXJlbWNlbS9zeW5jL2N1cnItcHJvamVjdHMvc2NhZGEuanMvdmVuZG9yL2xvYWRpbmctaW8vX190bXBfXy9sb2FkaW5nLWJhci9zcmMvbG9hZGluZy1iYXIubHMiLCIvaG9tZS9jZXJlbWNlbS9zeW5jL2N1cnItcHJvamVjdHMvc2NhZGEuanMvdmVuZG9yL2xvYWRpbmctaW8vX190bXBfXy9sb2FkaW5nLWJhci9zcmMvbXktbW9kdWxlLmxzIiwiL2hvbWUvY2VyZW1jZW0vc3luYy9jdXJyLXByb2plY3RzL3NjYWRhLmpzL3ZlbmRvci9sb2FkaW5nLWlvL19fdG1wX18vbG9hZGluZy1iYXIvc3JjL3ByZXNldHMubHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztBQ0F5QixHQUFoQixDQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsYUFBQSxDQUFBLENBQWdCO0FBQ04sT0FBVixDQUFBLENBQUEsQ0FBQSxPQUFBLENBQUEsU0FBQSxDQUFBLENBQVU7QUFFbkIsU0FBVyxDQUFBLENBQUEsQ0FBRSxRQUFBLENBQUEsR0FBQTtTQUFTLEdBQUcsQ0FBQyxLQUFLLEVBQUE7O0FBQy9CLElBQUssQ0FBQSxDQUFBLENBQUUsUUFBQSxDQUFBLE9BQUE7U0FBeUMsNEJBQUMsQ0FBQSxDQUFBLENBQUUsSUFBRixDQUFPLE9BQUQ7O0FBRXZELENBQUcsUUFBQSxDQUFBLENBQUgsQ0FBQTtBQUFBLE1BQUEsSUFBQSxFQUFBLE9BQUEsRUFBQSxLQUFBO0FBQUEsRUFDSSxJQUFLLENBQUEsQ0FBQSxDQUNELENBRlI7QUFBQSxJQUVRLElBRlIsRUFFYyxRQUFBLENBQUEsT0FBQSxDQUZkLENBQUE7QUFBQSxNQUFBLE1BQUEsQ0FFMkIsMEdBQUEsQ0FBQSxDQUFBLENBRThDLE9BQUEsQ0FBQSxDQUFBLENBQUEsS0FKekUsQ0FBQTtBQUFBLElBQUEsQ0FBQSxDQUFB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RTtJQUNNLDJCQUFFO0VBTnJCO0VBT1YsTUFDVTtJQUFBLFFBQUU7SUFDSCxPQUF5TjtJQUNyTSwyQkFBRTtJQUNiLGdCQUFFO0lBQ04sWUFBTztJQUNQLFlBQVM7RUFMYjtFQU1WLE1BQ1U7SUFBQSxRQUFFO0lBQ0YsUUFBRTtJQUNBLFVBQUU7SUFDSSxnQkFBRTtJQUNGLGdCQUFFO0lBQ0ksc0JBQUU7RUFMaEI7RUFNVixLQUNVO0lBQUEsUUFBRTtJQUNGLFFBQUU7SUFDRSxZQUFFO0lBQ04sUUFBRTtJQUNTLG1CQUFFO0lBQ00sMkJBQUU7SUFDZixjQUFFO0lBQ04sVUFBRTtJQUNJLGdCQUFFO0lBQ0YsZ0JBQUU7SUFDSSxzQkFBRTtFQVZoQjtFQVdWLFFBQ1U7SUFBQSxRQUFFO0lBQ0YsUUFBRTtJQUNFLFlBQUU7SUFDTixRQUFFO0lBQ1MsbUJBQUU7SUFDTSwyQkFBRTtJQUNmLGNBQUU7SUFDTixVQUFFO0lBQ0ksZ0JBQUU7SUFDRixnQkFBRTtJQUNJLHNCQUFFO0VBVmhCO0VBV1YsUUFDVTtJQUFBLFFBQUU7SUFDRixRQUFFO0lBQ0UsWUFBRTtJQUNOLFFBQUU7SUFDTSxnQkFBTztJQUNKLG1CQUFFO0lBQ00sMkJBQUU7SUFDZixjQUFFO0lBQ04sVUFBRTtJQUNJLGdCQUFFO0lBQ0YsZ0JBQUU7SUFDSSxzQkFBRTtFQVhoQjtBQTNEViIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJyZXF1aXJlISAnLi9teS1tb2R1bGUnOiB7aGV5fVxucmVxdWlyZSEgcHJlc2V0czoge3ByZXNldHN9XG5cbnNpbXBsZS1zdHIgPSAoYXJyKSAtPiBhcnIuam9pbiAnJ1xud3JhcCA9IChjb250ZW50KSAtPiBcImRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsXCIgKyBidG9hKGNvbnRlbnQpXG5cbmRvIC0+XG4gICAgbWFrZSA9XG4gICAgICAgIGhlYWQ6ICh2aWV3Qm94KSAtPiBcIlwiXCJcbiAgICAgICAgICAgICAgICA8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJ1dGYtOFwiPz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIjdmlld0JveFwiPlxuICAgICAgICAgICAgICAgIFwiXCJcIlxuXG4gICAgICAgIGdyYWRpZW50OiAoZGlyID0gNDUsIGR1ciA9IDEsIC4uLmNvbG9ycykgLT5cbiAgICAgICAgICAgIHJldCA9IFtAaGVhZCBcIjAgMCAxMDAgMTAwXCJdXG4gICAgICAgICAgICBsZW4gPSBjb2xvcnMubGVuZ3RoICogNCArIDFcbiAgICAgICAgICAgIGRpciA9IGRpciAqIE1hdGguUEkgLyAxODBcbiAgICAgICAgICAgIGd4ID0gTWF0aC5jb3MoZGlyKSAqKiAyXG4gICAgICAgICAgICBneSA9IE1hdGguc3FydChneCAtIGd4ICoqIDIpXG4gICAgICAgICAgICBpZiBkaXIgPiBNYXRoLlBJICogMC4yNSA9PlxuICAgICAgICAgICAgICAgIGd5ID0gTWF0aC5zaW4oZGlyKSAqKiAyXG4gICAgICAgICAgICAgICAgZ3ggPSBNYXRoLnNxcnQoZ3kgLSBneSAqKiAyKVxuICAgICAgICAgICAgeCA9IGd4ICogMTAwXG4gICAgICAgICAgICB5ID0gZ3kgKiAxMDBcbiAgICAgICAgICAgIHJldC5wdXNoIFwiXCJcIjxkZWZzPjxsaW5lYXJHcmFkaWVudCBpZD1cImdyYWRpZW50XCIgeDE9XCIwXCIgeDI9XCIjZ3hcIiB5MT1cIjBcIiB5Mj1cIiNneVwiPlwiXCJcIlxuICAgICAgICAgICAgZm9yIGkgZnJvbSAwIHRpbCBsZW4gPT5cbiAgICAgICAgICAgICAgICBpZHggPSBpICogMTAwIC8gKGxlbiAtIDEpXG4gICAgICAgICAgICAgICAgcmV0LnB1c2ggXCJcIlwiPHN0b3Agb2Zmc2V0PVwiI3tpZHh9JVwiIHN0b3AtY29sb3I9XCIje2NvbG9yc1tpICUgY29sb3JzLmxlbmd0aF19XCIvPlwiXCJcIlxuICAgICAgICAgICAgcmV0LnB1c2ggXCJcIlwiXG4gICAgICAgICAgICAgICAgPC9saW5lYXJHcmFkaWVudD48L2RlZnM+XG4gICAgICAgICAgICAgICAgPHJlY3QgeD1cIjBcIiB5PVwiMFwiIHdpZHRoPVwiNDAwXCIgaGVpZ2h0PVwiNDAwXCIgZmlsbD1cInVybChcXCNncmFkaWVudClcIj5cbiAgICAgICAgICAgICAgICA8YW5pbWF0ZVRyYW5zZm9ybSBhdHRyaWJ1dGVOYW1lPVwidHJhbnNmb3JtXCIgdHlwZT1cInRyYW5zbGF0ZVwiIGZyb209XCItI3gsLSN5XCJcbiAgICAgICAgICAgICAgICB0bz1cIjAsMFwiIGR1cj1cIiN7ZHVyfXNcIiByZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIi8+PC9yZWN0Pjwvc3ZnPlxuICAgICAgICAgICAgICAgIFwiXCJcIlxuICAgICAgICAgICAgd3JhcCByZXQuam9pbihcIlwiKVxuXG4gICAgICAgIHN0cmlwZTogKGMxPVxcI2I0YjRiNCwgYzI9XFwjZTZlNmU2LCBkdXIgPSAxKSAtPlxuICAgICAgICAgICAgcmV0ID0gW0BoZWFkIFwiMCAwIDEwMCAxMDBcIl1cbiAgICAgICAgICAgIHJldCArKz0gW1xuICAgICAgICAgICAgICAgIFwiXCJcIjxyZWN0IGZpbGw9XCIjYzJcIiB3aWR0aD1cIjEwMFwiIGhlaWdodD1cIjEwMFwiLz5cIlwiXCJcbiAgICAgICAgICAgICAgICBcIlwiXCI8Zz48Zz5cIlwiXCJcbiAgICAgICAgICAgICAgICBbXCJcIlwiPHBvbHlnb24gZmlsbD1cIiNjMVwiIFwiXCJcIiArXG4gICAgICAgICAgICAgICAgIFwiXCJcInBvaW50cz1cIiN7LTkwICsgaSAqIDIwfSwxMDAgI3stMTAwICsgaSAqIDIwfSxcIlwiXCIgK1xuICAgICAgICAgICAgICAgICBcIlwiXCIxMDAgI3stNjAgKyBpICogMjB9LDAgI3stNTAgKyBpICogMjB9LDAgXCIvPlwiXCJcIiBmb3IgaSBmcm9tIDAgdGlsIDEzXS5qb2luKFwiXCIpXG4gICAgICAgICAgICAgICAgXCJcIlwiPC9nPjxhbmltYXRlVHJhbnNmb3JtIGF0dHJpYnV0ZU5hbWU9XCJ0cmFuc2Zvcm1cIiB0eXBlPVwidHJhbnNsYXRlXCIgXCJcIlwiXG4gICAgICAgICAgICAgICAgXCJcIlwiZnJvbT1cIjAsMFwiIHRvPVwiMjAsMFwiIGR1cj1cIiN7ZHVyfXNcIiByZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIi8+PC9nPjwvc3ZnPlwiXCJcIlxuICAgICAgICAgICAgXS5qb2luKFwiXCIpXG4gICAgICAgICAgICB3cmFwIHJldFxuXG4gICAgICAgIGJ1YmJsZTogKGMxID0gXFwjMzlkLCBjMiA9IFxcIzljZiwgY291bnQgPSAxNSwgZHVyID0gMSwgc2l6ZSA9IDYsIHN3PTEpIC0+XG4gICAgICAgICAgICByZXQgPSBbQGhlYWQoXCIwIDAgMjAwIDIwMFwiKSwgXCJcIlwiPHJlY3QgeD1cIjBcIiB5PVwiMFwiIHdpZHRoPVwiMjAwXCIgaGVpZ2h0PVwiMjAwXCIgZmlsbD1cIiNjMVwiLz5cIlwiXCJdXG4gICAgICAgICAgICBmb3IgaSBmcm9tIDAgdGlsIGNvdW50ID0+XG4gICAgICAgICAgICAgICAgaWR4ID0gLShpIC8gY291bnQpICogZHVyXG4gICAgICAgICAgICAgICAgeCA9IE1hdGgucmFuZG9tISAqIDE4NCArIDhcbiAgICAgICAgICAgICAgICByID0gKCBNYXRoLnJhbmRvbSEgKiAwLjcgKyAwLjMgKSAqIHNpemVcbiAgICAgICAgICAgICAgICBkID0gZHVyICogKDEgKyBNYXRoLnJhbmRvbSEgKiAwLjUpXG4gICAgICAgICAgICAgICAgcmV0LnB1c2ggW1xuICAgICAgICAgICAgICAgICAgICBcIlwiXCI8Y2lyY2xlIGN4PVwiI3hcIiBjeT1cIjBcIiByPVwiI3JcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cIiNjMlwiIHN0cm9rZS13aWR0aD1cIiNzd1wiPlwiXCJcIlxuICAgICAgICAgICAgICAgICAgICBcIlwiXCI8YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVwiY3lcIiB2YWx1ZXM9XCIxOTA7LTEwXCIgdGltZXM9XCIwOzFcIiBcIlwiXCJcbiAgICAgICAgICAgICAgICAgICAgXCJcIlwiZHVyPVwiI3tkfXNcIiBiZWdpbj1cIiN7aWR4fXNcIiByZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIi8+XCJcIlwiXG4gICAgICAgICAgICAgICAgICAgIFwiXCJcIjwvY2lyY2xlPlwiXCJcIlxuICAgICAgICAgICAgICAgICAgICBcIlwiXCI8Y2lyY2xlIGN4PVwiI3hcIiBjeT1cIjBcIiByPVwiI3JcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cIiNjMlwiIHN0cm9rZS13aWR0aD1cIiNzd1wiPlwiXCJcIlxuICAgICAgICAgICAgICAgICAgICBcIlwiXCI8YW5pbWF0ZSBhdHRyaWJ1dGVOYW1lPVwiY3lcIiB2YWx1ZXM9XCIzOTA7MTkwXCIgdGltZXM9XCIwOzFcIiBcIlwiXCJcbiAgICAgICAgICAgICAgICAgICAgXCJcIlwiZHVyPVwiI3tkfXNcIiBiZWdpbj1cIiN7aWR4fXNcIiByZXBlYXRDb3VudD1cImluZGVmaW5pdGVcIi8+XCJcIlwiXG4gICAgICAgICAgICAgICAgICAgIFwiXCJcIjwvY2lyY2xlPlwiXCJcIlxuICAgICAgICAgICAgICAgIF0uam9pbihcIlwiKVxuICAgICAgICAgICAgd3JhcChyZXQuam9pbihcIlwiKSArIFwiPC9zdmc+XCIpXG5cbiAgICBoYW5kbGVyID1cbiAgICAgICAgcXVldWU6IHt9XG4gICAgICAgIHJ1bm5pbmc6IGZhbHNlXG4gICAgICAgIG1haW46ICh0aW1lc3RhbXApIC0+XG4gICAgICAgICAgICBrZWVwb24gPSBmYWxzZVxuICAgICAgICAgICAgcmVtb3ZlZCA9IFtdXG4gICAgICAgICAgICBmb3IgayxmdW5jIG9mIEBxdWV1ZSA9PlxuICAgICAgICAgICAgICAgIHJldCA9IGZ1bmMgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgaWYgIXJldCA9PiByZW1vdmVkLnB1c2ggZnVuY1xuICAgICAgICAgICAgICAgIGtlZXBvbiA9IGtlZXBvbiBvciByZXRcbiAgICAgICAgICAgIGZvciBrLGZ1bmMgb2YgQHF1ZXVlID0+IGlmIHJlbW92ZWQuaW5kZXhPZihmdW5jKSA+PSAwID0+IGRlbGV0ZSBAcXVldWVba11cbiAgICAgICAgICAgIGlmIGtlZXBvbiA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKH4+IEBtYWluIGl0KVxuICAgICAgICAgICAgZWxzZSBAcnVubmluZyA9IGZhbHNlXG4gICAgICAgIGFkZDogKGtleSwgZikgLT5cbiAgICAgICAgICAgIGlmICFAcXVldWVba2V5XSA9PiBAcXVldWVba2V5XSA9IGZcbiAgICAgICAgICAgIGlmICFAcnVubmluZyA9PlxuICAgICAgICAgICAgICAgIEBydW5uaW5nID0gdHJ1ZVxuICAgICAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSAofj4gQG1haW4gaXQpXG5cblxuICAgIHdpbmRvdy5sZEJhciA9IGxkQmFyID0gKHNlbGVjdG9yLCBvcHRpb24gPSB7fSkgLT5cbiAgICAgICAgeG1sbnMgPSB4bGluazogXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCJcbiAgICAgICAgcm9vdCA9IGlmIHR5cGVvZiEgc2VsZWN0b3IgaXMgXFxTdHJpbmdcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Igc2VsZWN0b3JcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgc2VsZWN0b3JcblxuICAgICAgICBjbHMgPSByb290LmdldEF0dHJpYnV0ZShcXGNsYXNzKSBvciAnJ1xuICAgICAgICBpZiAhfmNscy5pbmRleE9mKCdsZEJhcicpID0+IHJvb3Quc2V0QXR0cmlidXRlIFxcY2xhc3MsIFwiI2NscyBsZEJhclwiXG4gICAgICAgIGlkLXByZWZpeCA9IFwibGRCYXItI3tNYXRoLnJhbmRvbSF0b1N0cmluZyAxNiAuc3Vic3RyaW5nIDJ9XCJcbiAgICAgICAgaWQgPVxuICAgICAgICAgICAga2V5OiBpZFxuICAgICAgICAgICAgY2xpcDogXCIje2lkLXByZWZpeH0tY2xpcFwiXG4gICAgICAgICAgICBmaWx0ZXI6IFwiI3tpZC1wcmVmaXh9LWZpbHRlclwiXG4gICAgICAgICAgICBwYXR0ZXJuOiBcIiN7aWQtcHJlZml4fS1wYXR0ZXJuXCJcbiAgICAgICAgICAgIG1hc2s6IFwiI3tpZC1wcmVmaXh9LW1hc2tcIlxuICAgICAgICAgICAgbWFzay1wYXRoOiBcIiN7aWQtcHJlZml4fS1tYXNrLXBhdGhcIlxuICAgICAgICBkb21UcmVlID0gKG4sbykgLT5cbiAgICAgICAgICAgIG4gPSBuZXdOb2RlIG5cbiAgICAgICAgICAgIGZvciBrLHYgb2YgbyA9PiBpZiBrICE9IFxcYXR0ciA9PiBuLmFwcGVuZENoaWxkIGRvbVRyZWUoaywgdiBvciB7fSlcbiAgICAgICAgICAgIG4uYXR0cnMoby5hdHRyIG9yIHt9KVxuICAgICAgICAgICAgblxuICAgICAgICBuZXdOb2RlID0gKG4pIC0+IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIsIG5cbiAgICAgICAgZG9jdW1lbnQuYm9keS5fX3Byb3RvX18uX19wcm90b19fLl9fcHJvdG9fX1xuICAgICAgICAgICAgLi50ZXh0ID0gKHQpIC0+IEBhcHBlbmRDaGlsZCBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0KVxuICAgICAgICAgICAgLi5hdHRycyA9IChvKSAtPiBmb3Igayx2IG9mIG8gPT5cbiAgICAgICAgICAgICAgICByZXQgPSAvKFteOl0rKTooW146XSspLy5leGVjKGspXG4gICAgICAgICAgICAgICAgaWYgIXJldCBvciAheG1sbnNbcmV0LjFdID0+IEBzZXRBdHRyaWJ1dGUgaywgdlxuICAgICAgICAgICAgICAgIGVsc2UgQHNldEF0dHJpYnV0ZU5TIHhtbG5zW3JldC4xXSwgaywgdlxuICAgICAgICAgICAgLi5zdHlsZXMgPSAobykgLT4gZm9yIGssdiBvZiBvID0+IEBzdHlsZVtrXSA9IHZcbiAgICAgICAgICAgIC4uYXBwZW5kID0gKG4pIC0+IEBhcHBlbmRDaGlsZCByID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TIFwiaHR0cDovL3d3dy53My5vZy8yMDAwL3N2Z1wiLCBuXG4gICAgICAgICAgICAuLmF0dHIgPSAobix2KSAtPiBpZiB2PyA9PiBAc2V0QXR0cmlidXRlIG4sIHYgZWxzZSBAZ2V0QXR0cmlidXRlIG5cbiAgICAgICAgY29uZmlnID1cbiAgICAgICAgICAgIFwidHlwZVwiOiAnc3Ryb2tlJ1xuICAgICAgICAgICAgXCJpbWdcIjogJydcbiAgICAgICAgICAgIFwicGF0aFwiOiAnTTEwIDEwTDkwIDEwJ1xuICAgICAgICAgICAgXCJmaWxsLWRpclwiOiBcXGJ0dFxuICAgICAgICAgICAgXCJmaWxsXCI6IFxcIzI1YlxuICAgICAgICAgICAgXCJmaWxsLWJhY2tncm91bmRcIjogXFwjZGRkXG4gICAgICAgICAgICBcImZpbGwtYmFja2dyb3VuZC1leHRydWRlXCI6IDNcbiAgICAgICAgICAgIFwicGF0dGVybi1zaXplXCI6IG51bGxcbiAgICAgICAgICAgIFwic3Ryb2tlLWRpclwiOiBcXG5vcm1hbFxuICAgICAgICAgICAgXCJzdHJva2VcIjogXFwjMjViXG4gICAgICAgICAgICBcInN0cm9rZS13aWR0aFwiOiBcXDNcbiAgICAgICAgICAgIFwic3Ryb2tlLXRyYWlsXCI6IFxcI2RkZFxuICAgICAgICAgICAgXCJzdHJva2UtdHJhaWwtd2lkdGhcIjogMC41XG4gICAgICAgICAgICBcImR1cmF0aW9uXCI6IDFcbiAgICAgICAgICAgIFwiZWFzaW5nXCI6IFxcbGluZWFyXG4gICAgICAgICAgICBcInZhbHVlXCI6IDBcbiAgICAgICAgICAgIFwiaW1nLXNpemVcIjogbnVsbFxuXG4gICAgICAgIGNvbmZpZ1tcInByZXNldFwiXSA9IHJvb3QuYXR0cihcImRhdGEtcHJlc2V0XCIpIG9yIG9wdGlvbltcInByZXNldFwiXVxuXG4gICAgICAgIGlmIGNvbmZpZy5wcmVzZXQ/XG4gICAgICAgICAgICAjIHVzZSB0aGUgZGVmYXVsdCBwcmVzZXRcbiAgICAgICAgICAgIGNvbmZpZyA8PDwgcHJlc2V0c1tjb25maWcucHJlc2V0XVxuXG4gICAgICAgICMgb3ZlcndyaXRlIGlmIHRoZXJlIGFyZSBhcmd1bWVudHMgcGFzc2VkIHZpYSBkYXRhLSogYXR0cmlidXRlc1xuICAgICAgICBmb3IgYXR0ciBvZiBjb25maWdcbiAgICAgICAgICAgIGlmIHRoYXQgPSByb290LmF0dHIgXCJkYXRhLSN7YXR0cn1cIlxuICAgICAgICAgICAgICAgIGNvbmZpZ1thdHRyXSA9IHRoYXRcblxuICAgICAgICBjb25maWcgPDw8IG9wdGlvblxuICAgICAgICBpZiBjb25maWcuaW1nID0+IGNvbmZpZy5wYXRoID0gbnVsbFxuXG4gICAgICAgIGlzLXN0cm9rZSA9IGNvbmZpZy50eXBlID09IFxcc3Ryb2tlXG4gICAgICAgIHBhcnNlLXJlcyA9ICh2KSAtPlxuICAgICAgICAgICAgcGFyc2VyID0gL2RhdGE6bGRiYXJcXC9yZXMsKFteKCldKylcXCgoW14pXSspXFwpL1xuICAgICAgICAgICAgcmV0ID0gcGFyc2VyLmV4ZWModilcbiAgICAgICAgICAgIGlmICFyZXQgPT4gcmV0dXJuIHZcbiAgICAgICAgICAgIHJldCA9IG1ha2VbcmV0LjFdLmFwcGx5IG1ha2UsIHJldC4yLnNwbGl0KFxcLClcbiAgICAgICAgY29uZmlnLmZpbGwgPSBwYXJzZS1yZXMgY29uZmlnLmZpbGxcbiAgICAgICAgY29uZmlnLnN0cm9rZSA9IHBhcnNlLXJlcyBjb25maWcuc3Ryb2tlXG5cblxuICAgICAgICBwYXJzZS1yZXMgPSAodikgLT5cbiAgICAgICAgICAgIHBhcnNlciA9IC9kYXRhOmxkYmFyXFwvcmVzLChbXigpXSspXFwoKFteKV0rKVxcKS9cbiAgICAgICAgICAgIHJldCA9IHBhcnNlci5leGVjKHYpXG4gICAgICAgICAgICBpZiAhcmV0ID0+IHJldHVybiB2XG4gICAgICAgICAgICByZXQgPSBtYWtlW3JldC4xXS5hcHBseSBtYWtlLCByZXQuMi5zcGxpdChcXCwpXG4gICAgICAgIGNvbmZpZy5maWxsID0gcGFyc2UtcmVzIGNvbmZpZy5maWxsXG4gICAgICAgIGNvbmZpZy5zdHJva2UgPSBwYXJzZS1yZXMgY29uZmlnLnN0cm9rZVxuXG4gICAgICAgIGRvbSA9XG4gICAgICAgICAgICBhdHRyOlxuICAgICAgICAgICAgICAgIFwieG1sbnM6eGxpbmtcIjogXFxodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXG4gICAgICAgICAgICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbzogJ3hNaWRZTWlkJ1xuICAgICAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIiwgaGVpZ2h0OiBcIjEwMCVcIlxuICAgICAgICAgICAgZGVmczpcbiAgICAgICAgICAgICAgICBmaWx0ZXI6XG4gICAgICAgICAgICAgICAgICAgIGF0dHI6IGlkOiBpZC5maWx0ZXIsIHg6IC0xLCB5OiAtMSwgd2lkdGg6IDMsIGhlaWdodDogM1xuICAgICAgICAgICAgICAgICAgICBmZU1vcnBob2xvZ3k6IGF0dHI6XG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVyYXRvcjogKGlmICtjb25maWdbXCJmaWxsLWJhY2tncm91bmQtZXh0cnVkZVwiXT49MCA9PiBcXGRpbGF0ZSBlbHNlIFxcZXJvZGUpXG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IE1hdGguYWJzKCtjb25maWdbXCJmaWxsLWJhY2tncm91bmQtZXh0cnVkZVwiXSlcbiAgICAgICAgICAgICAgICAgICAgZmVDb2xvck1hdHJpeDogYXR0cjoge3ZhbHVlczogJzAgMCAwIDAgMSAgICAwIDAgMCAwIDEgICAgMCAwIDAgMCAxICAgIDAgMCAwIDEgMCcsIHJlc3VsdDogXCJjbVwifVxuICAgICAgICAgICAgICAgIG1hc2s6XG4gICAgICAgICAgICAgICAgICAgIGF0dHI6IGlkOiBpZC5tYXNrXG4gICAgICAgICAgICAgICAgICAgIGltYWdlOiBhdHRyOlxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ4bGluazpocmVmXCI6IGNvbmZpZy5pbWdcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcjogXCJ1cmwoXFwjI3tpZC5maWx0ZXJ9KVwiXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiAwLCB5OiAwLCB3aWR0aDogMTAwLCBoZWlnaHQ6IDEwMCwgcHJlc2VydmVBc3BlY3RSYXRpbzogXCJ4TWlkWU1pZFwiXG5cbiAgICAgICAgICAgICAgICBnOlxuICAgICAgICAgICAgICAgICAgICBtYXNrOlxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjogaWQ6IGlkLm1hc2stcGF0aFxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogYXR0cjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkOiBjb25maWcucGF0aCBvciBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsbDogXFwjZmZmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBcXCNmZmZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IFwidXJsKFxcIyN7aWQuZmlsdGVyfSlcIlxuXG4gICAgICAgICAgICAgICAgY2xpcFBhdGg6XG4gICAgICAgICAgICAgICAgICAgIGF0dHI6IGlkOiBpZC5jbGlwXG4gICAgICAgICAgICAgICAgICAgIHJlY3Q6IHthdHRyOiBjbGFzczogXFxtYXNrLCBmaWxsOiBcXCMwMDB9XG4gICAgICAgICAgICAgICAgcGF0dGVybjpcbiAgICAgICAgICAgICAgICAgICAgYXR0cjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpZC5wYXR0ZXJuLCBwYXR0ZXJuVW5pdHM6IFxcdXNlclNwYWNlT25Vc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6MCwgeTogMCwgd2lkdGg6IDMwMCwgaGVpZ2h0OiAzMDBcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2U6IGF0dHI6IHg6IDAsIHk6IDAsIHdpZHRoOiAzMDAsIGhlaWdodDogMzAwXG5cbiAgICAgICAgc3ZnID0gZG9tVHJlZSBcXHN2ZywgZG9tXG4gICAgICAgIHRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50IFxcZGl2XG4gICAgICAgIHRleHQuc2V0QXR0cmlidXRlIFxcY2xhc3MsIFxcbGRCYXItbGFiZWxcbiAgICAgICAgcm9vdC5hcHBlbmRDaGlsZCBzdmdcbiAgICAgICAgcm9vdC5hcHBlbmRDaGlsZCB0ZXh0XG5cbiAgICAgICAgZ3JvdXAgPSBbMCwwXVxuICAgICAgICBsZW5ndGggPSAwXG5cbiAgICAgICAgQGZpdCA9IC0+XG4gICAgICAgICAgICBib3ggPSBncm91cC4xLmdldEJCb3ghXG4gICAgICAgICAgICBkID0gKE1hdGgubWF4LmFwcGx5IG51bGwsIDxbc3Ryb2tlLXdpZHRoIHN0cm9rZS10cmFpbC13aWR0aCBmaWxsLWJhY2tncm91bmQtZXh0cnVkZV0+Lm1hcCgtPmNvbmZpZ1tpdF0pKSAqIDEuNVxuXG4gICAgICAgICAgICBzdmcuYXR0cnMgdmlld0JveDogW2JveC54IC0gZCwgYm94LnkgLSBkLCBib3gud2lkdGggKyBkICogMiwgYm94LmhlaWdodCArIGQgKiAyXS5qb2luKFwiIFwiKVxuXG4gICAgICAgICAgICBpZiAhcm9vdC5zdHlsZS53aWR0aCA9PiByb290LnN0eWxlcyB3aWR0aDogXCIje2JveC53aWR0aCArIGQgKiAyfXB4XCJcbiAgICAgICAgICAgIGlmICFyb290LnN0eWxlLmhlaWdodCA9PiByb290LnN0eWxlcyBoZWlnaHQ6IFwiI3tib3guaGVpZ2h0ICsgZCAqIDJ9cHhcIlxuICAgICAgICAgICAgcmVjdCA9IGdyb3VwLjAucXVlcnlTZWxlY3RvciBcXHJlY3RcbiAgICAgICAgICAgIGlmIHJlY3QgPT4gcmVjdC5hdHRycyBkb1xuICAgICAgICAgICAgICAgIHg6IGJveC54IC0gZCwgeTogYm94LnkgLSBkLCB3aWR0aDogYm94LndpZHRoICsgZCAqIDIsIGhlaWdodDogYm94LmhlaWdodCArIGQgKiAyXG5cbiAgICAgICAgaWYgY29uZmlnLnBhdGggPT5cbiAgICAgICAgICAgIGlmIGlzLXN0cm9rZSA9PlxuICAgICAgICAgICAgICAgIGdyb3VwLjAgPSBkb21UcmVlIFxcZywgcGF0aDogYXR0cjpcbiAgICAgICAgICAgICAgICAgICAgZDogY29uZmlnLnBhdGhcbiAgICAgICAgICAgICAgICAgICAgZmlsbDogXFxub25lXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiBcXGJhc2VsaW5lXG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgZ3JvdXAuMCA9IGRvbVRyZWUgXFxnLCByZWN0OiBhdHRyOlxuICAgICAgICAgICAgICAgICAgICB4OiAwLCB5OiAwLCB3aWR0aDogMTAwLCBoZWlnaHQ6IDEwMFxuICAgICAgICAgICAgICAgICAgICBtYXNrOiBcInVybChcXCMje2lkLm1hc2stcGF0aH0pXCIsIGZpbGw6IGNvbmZpZ1tcImZpbGwtYmFja2dyb3VuZFwiXVxuICAgICAgICAgICAgICAgICAgICBjbGFzczogXFxmcmFtZVxuXG4gICAgICAgICAgICBzdmcuYXBwZW5kQ2hpbGQgZ3JvdXAuMFxuICAgICAgICAgICAgZ3JvdXAuMSA9IGRvbVRyZWUgXFxnLCBwYXRoOiBhdHRyOlxuICAgICAgICAgICAgICAgIGQ6IGNvbmZpZy5wYXRoLCBjbGFzczogaWYgaXMtc3Ryb2tlID0+IFxcbWFpbmxpbmUgZWxzZSBcXHNvbGlkXG4gICAgICAgICAgICAgICAgXCJjbGlwLXBhdGhcIjogaWYgY29uZmlnLnR5cGUgPT0gXFxmaWxsID0+IFwidXJsKFxcIyN7aWQuY2xpcH0pXCIgZWxzZSAnJ1xuICAgICAgICAgICAgc3ZnLmFwcGVuZENoaWxkIGdyb3VwLjFcbiAgICAgICAgICAgIHBhdGgwID0gZ3JvdXAuMC5xdWVyeVNlbGVjdG9yIChpZiBpcy1zdHJva2UgPT4gXFxwYXRoIGVsc2UgXFxyZWN0KVxuICAgICAgICAgICAgcGF0aDEgPSBncm91cC4xLnF1ZXJ5U2VsZWN0b3IgXFxwYXRoXG4gICAgICAgICAgICBpZiBpcy1zdHJva2UgPT4gcGF0aDEuYXR0cnMgZmlsbDogXFxub25lXG5cbiAgICAgICAgICAgIHBhdGltZyA9IHN2Zy5xdWVyeVNlbGVjdG9yICdwYXR0ZXJuIGltYWdlJ1xuICAgICAgICAgICAgaW1nID0gbmV3IEltYWdlIVxuICAgICAgICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIgXFxsb2FkLCAtPlxuICAgICAgICAgICAgICAgIGJveCA9IGlmIGNvbmZpZ1tcInBhdHRlcm4tc2l6ZVwiXSA9PiB7d2lkdGg6ICt0aGF0LCBoZWlnaHQ6ICt0aGF0fVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgaW1nLndpZHRoIGFuZCBpbWcuaGVpZ2h0ID0+IHt3aWR0aDogaW1nLndpZHRoLCBoZWlnaHQ6IGltZy5oZWlnaHR9XG4gICAgICAgICAgICAgICAgZWxzZSB7d2lkdGg6IDMwMCwgaGVpZ2h0OiAzMDB9XG4gICAgICAgICAgICAgICAgc3ZnLnF1ZXJ5U2VsZWN0b3IgXFxwYXR0ZXJuIC5hdHRycyB7d2lkdGg6IGJveC53aWR0aCwgaGVpZ2h0OiBib3guaGVpZ2h0fVxuICAgICAgICAgICAgICAgIHBhdGltZy5hdHRycyB7d2lkdGg6IGJveC53aWR0aCwgaGVpZ2h0OiBib3guaGVpZ2h0fVxuICAgICAgICAgICAgaWYgLy4rXFwuLit8XmRhdGE6Ly5leGVjKGlmICFpcy1zdHJva2UgPT4gY29uZmlnLmZpbGwgZWxzZSBjb25maWcuc3Ryb2tlKSA9PlxuICAgICAgICAgICAgICAgIGltZy5zcmMgPSBpZiAhaXMtc3Ryb2tlID0+IGNvbmZpZy5maWxsIGVsc2UgY29uZmlnLnN0cm9rZVxuICAgICAgICAgICAgICAgIHBhdGltZy5hdHRycyBcInhsaW5rOmhyZWZcIjogaW1nLnNyYyAjaWYgIWlzLXN0cm9rZSA9PiBjb25maWcuZmlsbCBlbHNlIGNvbmZpZy5zdHJva2VcblxuICAgICAgICAgICAgaWYgaXMtc3Ryb2tlID0+XG4gICAgICAgICAgICAgICAgcGF0aDAuYXR0cnMgc3Ryb2tlOiBjb25maWdbXCJzdHJva2UtdHJhaWxcIl0sIFwic3Ryb2tlLXdpZHRoXCI6IGNvbmZpZ1tcInN0cm9rZS10cmFpbC13aWR0aFwiXVxuICAgICAgICAgICAgICAgIHBhdGgxLmF0dHJzIGRvXG4gICAgICAgICAgICAgICAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IGNvbmZpZ1tcInN0cm9rZS13aWR0aFwiXVxuICAgICAgICAgICAgICAgICAgICBzdHJva2U6IGlmIC8uK1xcLi4rfF5kYXRhOi8uZXhlYyhjb25maWcuc3Ryb2tlKSA9PiBcInVybChcXCMje2lkLnBhdHRlcm59KVwiIGVsc2UgY29uZmlnLnN0cm9rZVxuICAgICAgICAgICAgaWYgY29uZmlnLmZpbGwgYW5kICFpcy1zdHJva2UgPT5cbiAgICAgICAgICAgICAgICBwYXRoMS5hdHRycyBkb1xuICAgICAgICAgICAgICAgICAgICBmaWxsOiBpZiAvLitcXC4uK3xeZGF0YTovLmV4ZWMoY29uZmlnLmZpbGwpID0+IFwidXJsKFxcIyN7aWQucGF0dGVybn0pXCIgZWxzZSBjb25maWcuZmlsbFxuXG4gICAgICAgICAgICBsZW5ndGggPSBwYXRoMS5nZXRUb3RhbExlbmd0aCFcbiAgICAgICAgICAgIEBmaXQhXG4gICAgICAgICAgICBAaW5pdGVkID0gdHJ1ZVxuICAgICAgICBlbHNlIGlmIGNvbmZpZy5pbWcgPT5cbiAgICAgICAgICAgIGlmIGNvbmZpZ1tcImltZy1zaXplXCJdID0+XG4gICAgICAgICAgICAgICAgcmV0ID0gY29uZmlnW1wiaW1nLXNpemVcIl0uc3BsaXQoXFwsKVxuICAgICAgICAgICAgICAgIHNpemUgPSB7d2lkdGg6ICtyZXQuMCwgaGVpZ2h0OiArcmV0LjF9XG4gICAgICAgICAgICBlbHNlIHNpemUgPSB7d2lkdGg6IDEwMCwgaGVpZ2h0OiAxMDB9XG5cbiAgICAgICAgICAgIGdyb3VwLjAgPSBkb21UcmVlIFxcZywgcmVjdDogYXR0cjpcbiAgICAgICAgICAgICAgICB4OiAwLCB5OiAwLCB3aWR0aDogMTAwLCBoZWlnaHQ6IDEwMCwgbWFzazogXCJ1cmwoXFwjI3tpZC5tYXNrfSlcIiwgZmlsbDogY29uZmlnW1wiZmlsbC1iYWNrZ3JvdW5kXCJdXG4gICAgICAgICAgICBzdmcucXVlcnlTZWxlY3RvciAnbWFzayBpbWFnZScgLmF0dHJzIGRvXG4gICAgICAgICAgICAgICAgd2lkdGg6IHNpemUud2lkdGgsIGhlaWdodDogc2l6ZS5oZWlnaHRcbiAgICAgICAgICAgIGdyb3VwLjEgPSBkb21UcmVlIFxcZywgaW1hZ2U6IGF0dHI6XG4gICAgICAgICAgICAgICAgd2lkdGg6IHNpemUud2lkdGgsIGhlaWdodDogc2l6ZS5oZWlnaHQsIHg6IDAsIHk6IDAsIHByZXNlcnZlQXNwZWN0UmF0aW86IFwieE1pZFlNaWRcIlxuICAgICAgICAgICAgICAgICN3aWR0aDogMTAwLCBoZWlnaHQ6IDEwMCwgeDogMCwgeTogMCwgcHJlc2VydmVBc3BlY3RSYXRpbzogXCJ4TWlkWU1pZFwiXG4gICAgICAgICAgICAgICAgXCJjbGlwLXBhdGhcIjogaWYgY29uZmlnLnR5cGUgPT0gXFxmaWxsID0+IFwidXJsKFxcIyN7aWQuY2xpcH0pXCIgZWxzZSAnJ1xuICAgICAgICAgICAgICAgIFwieGxpbms6aHJlZlwiOiBjb25maWcuaW1nLCBjbGFzczogXFxzb2xpZFxuICAgICAgICAgICAgaW1nID0gbmV3IEltYWdlIVxuICAgICAgICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIgXFxsb2FkLCB+PlxuICAgICAgICAgICAgICAgIGlmIGNvbmZpZ1tcImltZy1zaXplXCJdID0+XG4gICAgICAgICAgICAgICAgICAgIHJldCA9IGNvbmZpZ1tcImltZy1zaXplXCJdLnNwbGl0KFxcLClcbiAgICAgICAgICAgICAgICAgICAgc2l6ZSA9IHt3aWR0aDogK3JldC4wLCBoZWlnaHQ6ICtyZXQuMX1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIGltZy53aWR0aCBhbmQgaW1nLmhlaWdodCA9PiBzaXplID0ge3dpZHRoOiBpbWcud2lkdGgsIGhlaWdodDogaW1nLmhlaWdodH1cbiAgICAgICAgICAgICAgICBlbHNlIHNpemUgPSB7d2lkdGg6IDEwMCwgaGVpZ2h0OiAxMDB9XG4gICAgICAgICAgICAgICAgc3ZnLnF1ZXJ5U2VsZWN0b3IgJ21hc2sgaW1hZ2UnIC5hdHRycyBkb1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogc2l6ZS53aWR0aCwgaGVpZ2h0OiBzaXplLmhlaWdodFxuICAgICAgICAgICAgICAgIGdyb3VwLjEucXVlcnlTZWxlY3RvciAnaW1hZ2UnIC5hdHRycyBkb1xuICAgICAgICAgICAgICAgICAgICB3aWR0aDogc2l6ZS53aWR0aCwgaGVpZ2h0OiBzaXplLmhlaWdodFxuXG4gICAgICAgICAgICAgICAgQGZpdCFcbiAgICAgICAgICAgICAgICBAc2V0IHVuZGVmaW5lZCwgZmFsc2VcbiAgICAgICAgICAgICAgICBAaW5pdGVkID0gdHJ1ZVxuICAgICAgICAgICAgaW1nLnNyYyA9IGNvbmZpZy5pbWdcbiAgICAgICAgICAgIHN2Zy5hcHBlbmRDaGlsZCBncm91cC4wXG4gICAgICAgICAgICBzdmcuYXBwZW5kQ2hpbGQgZ3JvdXAuMVxuICAgICAgICBzdmcuYXR0cnMgd2lkdGg6IFxcMTAwJSwgaGVpZ2h0OiBcXDEwMCUgIywgdmlld0JveDogJzAgMCAxMDAgMTAwJ1xuXG4gICAgICAgIEB0cmFuc2l0aW9uID1cbiAgICAgICAgICAgIHZhbHVlOlxuICAgICAgICAgICAgICAgIHNyYzogMFxuICAgICAgICAgICAgICAgIGRlczogMFxuICAgICAgICAgICAgdGltZToge31cblxuICAgICAgICAgICAgZWFzZTogKHQsYixjLGQpIC0+XG4gICAgICAgICAgICAgICAgdCA9IHQgLyAoZCAqIDAuNSlcbiAgICAgICAgICAgICAgICBpZiB0IDwgMSA9PiByZXR1cm4gYyAqIDAuNSAqIHQgKiB0ICsgYlxuICAgICAgICAgICAgICAgIHQgPSB0IC0gMVxuICAgICAgICAgICAgICAgIHJldHVybiAtYyAqIDAuNSAqICh0Kih0IC0gMikgLSAxKSArIGJcblxuICAgICAgICAgICAgaGFuZGxlcjogKHRpbWUpIC0+XG4gICAgICAgICAgICAgICAgaWYgIUB0aW1lLnNyYz8gPT4gQHRpbWUuc3JjID0gdGltZVxuICAgICAgICAgICAgICAgIFtkdiwgZHQsIGR1cl0gPSBbQHZhbHVlLmRlcyAtIEB2YWx1ZS5zcmMsICh0aW1lIC0gQHRpbWUuc3JjKSAqIDAuMDAxLCArY29uZmlnW1wiZHVyYXRpb25cIl0gb3IgMV1cbiAgICAgICAgICAgICAgICB0ZXh0LnRleHRDb250ZW50ID0gdiA9IE1hdGgucm91bmQoQGVhc2UgZHQsIEB2YWx1ZS5zcmMsIGR2LCBkdXIpXG4gICAgICAgICAgICAgICAgaWYgaXMtc3Ryb2tlID0+XG4gICAgICAgICAgICAgICAgICAgIG5vZGUgPSBwYXRoMVxuICAgICAgICAgICAgICAgICAgICBzdHlsZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBcInN0cm9rZS1kYXNoYXJyYXlcIjogKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNvbmZpZ1tcInN0cm9rZS1kaXJcIl0gPT0gXFxyZXZlcnNlID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiMCAje2xlbmd0aCAqICgxMDAgLSB2KSAqIDAuMDF9ICN7bGVuZ3RoICogdiAqIDAuMDF9IDBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgPT4gXCIje3YgKiAwLjAxICogbGVuZ3RofSAjeygxMDAgLSB2KSAqIDAuMDEgKiBsZW5ndGggKyAxfVwiXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBib3ggPSBncm91cC4xLmdldEJCb3ghXG4gICAgICAgICAgICAgICAgICAgIGRpciA9IGNvbmZpZ1tcImZpbGwtZGlyXCJdXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlID0gaWYgZGlyID09IFxcYnR0IG9yICFkaXIgPT4gZG9cbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IGJveC55ICsgYm94LmhlaWdodCAqICgxMDAgLSB2KSAqIDAuMDFcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogYm94LmhlaWdodCAqIHYgKiAwLjAxXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBib3gueCwgd2lkdGg6IGJveC53aWR0aFxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIGRpciA9PSBcXHR0YiA9PiBkb1xuICAgICAgICAgICAgICAgICAgICAgICAgeTogYm94LnksIGhlaWdodDogYm94LmhlaWdodCAqIHYgKiAwLjAxXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiBib3gueCwgd2lkdGg6IGJveC53aWR0aFxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIGRpciA9PSBcXGx0ciA9PiBkb1xuICAgICAgICAgICAgICAgICAgICAgICAgeTogYm94LnksIGhlaWdodDogYm94LmhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgeDogYm94LngsIHdpZHRoOiBib3gud2lkdGggKiB2ICogMC4wMVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIGRpciA9PSBcXHJ0bCA9PiBkb1xuICAgICAgICAgICAgICAgICAgICAgICAgeTogYm94LnksIGhlaWdodDogYm94LmhlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgeDogYm94LnggKyBib3gud2lkdGggKiAoMTAwIC0gdikgKiAwLjAxXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogYm94LndpZHRoICogdiAqIDAuMDFcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHN2Zy5xdWVyeVNlbGVjdG9yIFxccmVjdFxuICAgICAgICAgICAgICAgIG5vZGUuYXR0cnMgc3R5bGVcbiAgICAgICAgICAgICAgICBpZiBkdCA+PSBkdXIgPT4gZGVsZXRlIEB0aW1lLnNyYzsgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIHN0YXJ0OiAoc3JjLCBkZXMsIGRvVHJhbnNpdGlvbikgLT5cbiAgICAgICAgICAgICAgICBAdmFsdWUgPDw8IHtzcmMsIGRlc31cbiAgICAgICAgICAgICAgICAhISggcm9vdC5vZmZzZXRXaWR0aCB8fCByb290Lm9mZnNldEhlaWdodCB8fCByb290LmdldENsaWVudFJlY3RzIWxlbmd0aCApXG4gICAgICAgICAgICAgICAgaWYgIWRvVHJhbnNpdGlvbiBvciAhKCByb290Lm9mZnNldFdpZHRoIHx8IHJvb3Qub2Zmc2V0SGVpZ2h0IHx8IHJvb3QuZ2V0Q2xpZW50UmVjdHMhbGVuZ3RoICkgPT5cbiAgICAgICAgICAgICAgICAgICAgQHRpbWUuc3JjID0gMFxuICAgICAgICAgICAgICAgICAgICBAaGFuZGxlciAxMDAwXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIGhhbmRsZXIuYWRkIGlkLmtleSwgKHRpbWUpIH4+IHJldHVybiBAaGFuZGxlciB0aW1lXG5cbiAgICAgICAgQHNldCA9ICh2LGRvVHJhbnNpdGlvbiA9IHRydWUpIC0+XG4gICAgICAgICAgICBzcmMgPSBAdmFsdWUgb3IgMFxuICAgICAgICAgICAgaWYgdj8gPT4gQHZhbHVlID0gdiBlbHNlIHYgPSBAdmFsdWVcbiAgICAgICAgICAgIGRlcyA9IEB2YWx1ZVxuICAgICAgICAgICAgQHRyYW5zaXRpb24uc3RhcnQgc3JjLCBkZXMsIGRvVHJhbnNpdGlvblxuXG4gICAgICAgIEBzZXQgKCtjb25maWcudmFsdWUgb3IgMCksIGZhbHNlXG4gICAgICAgIEBcblxuICAgIC8qXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIgXFxsb2FkLCAoLT5cbiAgICAgICAgQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxcLmxkQmFyKSkuZm9yRWFjaCAtPiBpdC5sZEJhciA9IG5ldyBsZEJhciBpdFxuICAgICksIGZhbHNlXG4gICAgKi9cbiIsImV4cG9ydCBoZXkgPSAtPiBjb25zb2xlLmxvZyBcIlRoaXMgaXMgbG9hZGluZyBiYXIhXCJcbiIsImNvbnNvbGUubG9nIFwiUkVNT1ZFTUU6IHByZXNldHMgYXJlIHNlcGFyYXRlZFwiXG5leHBvcnQgcHJlc2V0cyA9XG4gICAgcmFpbmJvdzpcbiAgICAgICAgXCJ0eXBlXCI6ICdzdHJva2UnXG4gICAgICAgIFwicGF0aFwiOiAnTTEwIDEwTDkwIDEwJ1xuICAgICAgICBcInN0cm9rZVwiOiAnZGF0YTpsZGJhci9yZXMsZ3JhZGllbnQoMCwxLCNhNTUxZGYsI2ZkNTFhZCwjZmY3ZjgyLCNmZmI4NzQsI2ZmZWI5MCknXG4gICAgZW5lcmd5OlxuICAgICAgICBcInR5cGVcIjogJ2ZpbGwnXG4gICAgICAgIFwicGF0aFwiOiAnTTE1IDVMODUgNUE1IDUgMCAwIDEgODUgMTVMMTUgMTVBNSA1IDAgMCAxIDE1IDUnXG4gICAgICAgIFwic3Ryb2tlXCI6IFxcI2YwMFxuICAgICAgICBcImZpbGxcIjogJ2RhdGE6bGRiYXIvcmVzLGdyYWRpZW50KDQ1LDIsIzRlOSwjOGZiLCM0ZTkpJ1xuICAgICAgICBcImZpbGwtZGlyXCI6IFwibHRyXCJcbiAgICAgICAgXCJmaWxsLWJhY2tncm91bmRcIjogXFwjNDQ0XG4gICAgICAgIFwiZmlsbC1iYWNrZ3JvdW5kLWV4dHJ1ZGVcIjogMVxuICAgIHN0cmlwZTpcbiAgICAgICAgXCJ0eXBlXCI6ICdmaWxsJ1xuICAgICAgICBcInBhdGhcIjogJ00xNSA1TDg1IDVBNSA1IDAgMCAxIDg1IDE1TDE1IDE1QTUgNSAwIDAgMSAxNSA1J1xuICAgICAgICBcInN0cm9rZVwiOiBcXCNmMDBcbiAgICAgICAgXCJmaWxsXCI6ICdkYXRhOmxkYmFyL3JlcyxzdHJpcGUoIzI1YiwjNThlLDEpJ1xuICAgICAgICBcImZpbGwtZGlyXCI6IFwibHRyXCJcbiAgICAgICAgXCJmaWxsLWJhY2tncm91bmRcIjogXFwjZGRkXG4gICAgICAgIFwiZmlsbC1iYWNrZ3JvdW5kLWV4dHJ1ZGVcIjogMVxuICAgIHRleHQ6XG4gICAgICAgIFwidHlwZVwiOiAnZmlsbCdcbiAgICAgICAgXCJpbWdcIjogXCJcIlwiZGF0YTppbWFnZS9zdmcreG1sLDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiNzBcIiBoZWlnaHQ9XCIyMFwiIHZpZXdCb3g9XCIwIDAgNzAgMjBcIj48dGV4dCB4PVwiMzVcIiB5PVwiMTBcIiB0ZXh0LWFuY2hvcj1cIm1pZGRsZVwiIG1pbmFudC1iYXNlbGluZT1cImNlbnRyYWxcIiBmb250LWZhbWlseT1cImFyaWFsXCI+TE9BRElORzwvdGV4dD48L3N2Zz5cIlwiXCJcbiAgICAgICAgXCJmaWxsLWJhY2tncm91bmQtZXh0cnVkZVwiOiAxLjNcbiAgICAgICAgXCJwYXR0ZXJuLXNpemVcIjogMTAwXG4gICAgICAgIFwiZmlsbC1kaXJcIjogXCJsdHJcIlxuICAgICAgICBcImltZy1zaXplXCI6IFwiNzAsMjBcIlxuICAgIGxpbmU6XG4gICAgICAgIFwidHlwZVwiOiAnc3Ryb2tlJ1xuICAgICAgICBcInBhdGhcIjogJ00xMCAxMEw5MCAxMCdcbiAgICAgICAgXCJzdHJva2VcIjogXFwjMjViXG4gICAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IDNcbiAgICAgICAgXCJzdHJva2UtdHJhaWxcIjogXFwjZGRkXG4gICAgICAgIFwic3Ryb2tlLXRyYWlsLXdpZHRoXCI6IDFcbiAgICBmYW46XG4gICAgICAgIFwidHlwZVwiOiAnc3Ryb2tlJ1xuICAgICAgICBcInBhdGhcIjogJ00xMCA5MEE0MCA0MCAwIDAgMSA5MCA5MCdcbiAgICAgICAgXCJmaWxsLWRpclwiOiBcXGJ0dFxuICAgICAgICBcImZpbGxcIjogXFwjMjViXG4gICAgICAgIFwiZmlsbC1iYWNrZ3JvdW5kXCI6IFxcI2RkZFxuICAgICAgICBcImZpbGwtYmFja2dyb3VuZC1leHRydWRlXCI6IDNcbiAgICAgICAgXCJzdHJva2UtZGlyXCI6IFxcbm9ybWFsXG4gICAgICAgIFwic3Ryb2tlXCI6IFxcIzI1YlxuICAgICAgICBcInN0cm9rZS13aWR0aFwiOiBcXDNcbiAgICAgICAgXCJzdHJva2UtdHJhaWxcIjogXFwjZGRkXG4gICAgICAgIFwic3Ryb2tlLXRyYWlsLXdpZHRoXCI6IDAuNVxuICAgIGNpcmNsZTpcbiAgICAgICAgXCJ0eXBlXCI6ICdzdHJva2UnXG4gICAgICAgIFwicGF0aFwiOiAnTTUwIDEwQTQwIDQwIDAgMCAxIDUwIDkwQTQwIDQwIDAgMCAxIDUwIDEwJ1xuICAgICAgICBcImZpbGwtZGlyXCI6IFxcYnR0XG4gICAgICAgIFwiZmlsbFwiOiBcXCMyNWJcbiAgICAgICAgXCJmaWxsLWJhY2tncm91bmRcIjogXFwjZGRkXG4gICAgICAgIFwiZmlsbC1iYWNrZ3JvdW5kLWV4dHJ1ZGVcIjogM1xuICAgICAgICBcInN0cm9rZS1kaXJcIjogXFxub3JtYWxcbiAgICAgICAgXCJzdHJva2VcIjogXFwjMjViXG4gICAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IFxcM1xuICAgICAgICBcInN0cm9rZS10cmFpbFwiOiBcXCNkZGRcbiAgICAgICAgXCJzdHJva2UtdHJhaWwtd2lkdGhcIjogMC41XG4gICAgYnViYmxlOlxuICAgICAgICBcInR5cGVcIjogJ2ZpbGwnXG4gICAgICAgIFwicGF0aFwiOiAnTTUwIDEwQTQwIDQwIDAgMCAxIDUwIDkwQTQwIDQwIDAgMCAxIDUwIDEwJ1xuICAgICAgICBcImZpbGwtZGlyXCI6IFxcYnR0XG4gICAgICAgIFwiZmlsbFwiOiAnZGF0YTpsZGJhci9yZXMsYnViYmxlKCMzOWQsI2NlZiknXG4gICAgICAgIFwicGF0dGVybi1zaXplXCI6IFwiMTUwXCJcbiAgICAgICAgXCJmaWxsLWJhY2tncm91bmRcIjogXFwjZGRkXG4gICAgICAgIFwiZmlsbC1iYWNrZ3JvdW5kLWV4dHJ1ZGVcIjogMlxuICAgICAgICBcInN0cm9rZS1kaXJcIjogXFxub3JtYWxcbiAgICAgICAgXCJzdHJva2VcIjogXFwjMjViXG4gICAgICAgIFwic3Ryb2tlLXdpZHRoXCI6IFxcM1xuICAgICAgICBcInN0cm9rZS10cmFpbFwiOiBcXCNkZGRcbiAgICAgICAgXCJzdHJva2UtdHJhaWwtd2lkdGhcIjogMC41XG4iXX0=
