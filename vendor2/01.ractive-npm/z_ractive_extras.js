(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var sleep, toString$ = {}.toString;
Ractive.defaults.resolveInstanceMembers = true;
window.sleep = sleep = function(ms, f){
  return setTimeout(f, ms);
};

function hasAttribute({ proto }) {
	proto.hasAttribute = function hasAttribute(name) {
		return this.component && ((this.component.template.a && name in this.component.template.a) || (this.component.template.m && !!this.component.template.m.find(a => a.n === name)));
	}
}

Ractive.use(hasAttribute);

/***************************************************************************
by @evs-chris, https://gitter.im/ractivejs/ractive?at=59fa35f8d6c36fca31c4e427

Usage:

    +each('foo') <--- where curr.components is an Object
        btn.icon(on-click="@.delete('curr.components', @key)") #[i.minus.icon]

***************************************************************************/
Ractive.prototype['delete'] = function(root, key){
  var ref$;
  if (toString$.call(root).slice(8, -1) !== 'String') {
    console.error('keypath must be string');
  }
  if ((ref$ = this.get(root)) != null) {
    delete ref$[key];
  }
  return this.update(root);
};
Ractive.prototype.findWid = function(wid){
  var i$, ref$, len$, x;
  for (i$ = 0, len$ = (ref$ = this.findAllComponents()).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x.get('wid') === wid) {
      return x;
    }
  }
};
Ractive.prototype.findId = function(id){
  var i$, ref$, len$, x;
  for (i$ = 0, len$ = (ref$ = this.findAllComponents()).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x.get('id') === id) {
      return x;
    }
  }
};
Ractive.prototype.cloneContext = function(){
  var ctx;
  ctx = this.getContext().getParent(true);
  ctx.refire = true;
  return ctx;
};
Ractive.events.longpress = function(node, fire){
  var timer, clearTimer, mouseDownHandler, mouseUpHandler;
  timer = null;
  clearTimer = function(){
    if (timer) {
      clearTimeout(timer);
    }
    return timer = null;
  };
  mouseDownHandler = function(event){
    var timer;
    clearTimer();
    return timer = sleep(1000, function(){
      return fire({
        node: node,
        original: event
      });
    });
  };
  mouseUpHandler = function(){
    return clearTimer();
  };
  node.addEventListener('mousedown', mouseDownHandler);
  node.addEventListener('mouseup', mouseUpHandler);
  return {
    teardown: function(){
      node.removeEventListener('mousedown', mouseDownHandler);
      return node.removeEventListener('mouseup', mouseUpHandler);
    }
  };
};
Ractive.Context.findKeypathId = function(postfix){
  /***************************************************************************
  Use to find a unique DOM element near the context
  
  Usage:
  
      1.  define a DOM element with a unique id:
  
          <div id="{{@keypath}}-mypostfix" > ... </div>
  
      2. Find this DOM element within the handler, using ctx:
  
          myhandler: (ctx) ->
              the-div = ctx.find-keypath-id '-mypostfix'
  
  ***************************************************************************/
  postfix == null && (postfix = '');
  return this.ractive.find('#' + Ractive.escapeKey(this.resolve()) + postfix);
};
Ractive.Context.removeMe = function(){
  /***************************************************************************
  usage:
  
      +each('something')
          btn.icon(on-click="@context.removeMe()") #[i.minus.icon]
  ***************************************************************************/
  return this.splice('..', this.get('@index'), 1);
};



},{}]},{},[1]);
